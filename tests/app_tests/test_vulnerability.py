# Copyright 2019 Google LLC
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#      http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
"""Tests for app/vulnerability.py."""
import datetime
import unittest
import app.vulnerability as vuln

from tests.test_base import FlaskTest
from data.models import Vulnerability, VulnerabilityGitCommits, Nvd
from data.database import db
from sqlalchemy.orm.session import make_transient


class VulnerabilityDataTest(FlaskTest):

    def generate_testdata(self):

        def generate_commit_data():
            return VulnerabilityGitCommits(
                commit_link='https://github.com/0WN3R/REP0',
                commit_hash='F00D',
                repo_name='REP0',
                repo_owner='0WN3R',
            )

        self.vuln1 = Vulnerability(
            cve_id='CVE-1337',
            commits=[generate_commit_data()],
            comment="Test comment.",
            date_created=datetime.date.today())
        self.nvd1 = Nvd(
            cve_id='CVE-1337',
            published_date=datetime.date.today(),
            descriptions=[])
        self.vuln2 = Vulnerability(
            cve_id='CVE-1339',
            commits=[generate_commit_data()],
            date_created=datetime.date.today(),
            comment="Test comment2.",
        )

        self.vulns = [self.vuln1, self.vuln2]

        self.vuln_view1 = vuln.VulnerabilityView(
            self.vuln1, self.nvd1, preview=True)
        self.vuln_view2 = vuln.VulnerabilityView(self.vuln1, None, preview=True)
        self.vuln_view3 = vuln.VulnerabilityView(None, self.nvd1, preview=True)

    def setUp(self):
        super(VulnerabilityDataTest, self).setUp()
        self.generate_testdata()
        db.session.add_all(self.vulns)
        db.session.commit()

    def tearDown(self):
        for vuln in self.vulns:
            db.session.delete(vuln)
        db.session.commit()
        super(VulnerabilityDataTest, self).tearDown()


class TestVulnerbility(VulnerabilityDataTest):

    def test_getVulnerability(self):
        # Get by CVE-ID tests.
        actual_vuln = vuln.getVulnerability({"cve_id": 'CVE-1337'})
        self.assertEqual(actual_vuln, self.vuln1)
        actual_vuln = vuln.getVulnerability({"cve_id": 'CVE-0000'})
        self.assertEqual(actual_vuln, None)
        # Get by commit hash tests.
        actual_vuln = vuln.getVulnerability({"commit_hash": 'F00D'})
        self.assertEqual(actual_vuln, self.vuln1)
        actual_vuln = vuln.getVulnerability({"commit_hash": '0000'})
        self.assertEqual(actual_vuln, None)


class VulnerabilityViewTests(VulnerabilityDataTest):

    @classmethod
    def setUpClass(self):
        super(VulnerabilityViewTests, self).setUpClass()

    def test_read_data_from_vulnerability(self):
        pass


if __name__ == '__main__':
    unittest.main()
