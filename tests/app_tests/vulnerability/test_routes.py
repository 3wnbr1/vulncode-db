# Copyright 2019 Google LLC
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#      http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
from data.models.vulnerability import Vulnerability
import pytest


VULN_VIEW_VARIANTS = [
    ('CVE-1970-1000', 200, b'CVE-1970-1000'),  # no redirect
    ('1', 308, b'/CVE-1970-1000'),  # redirect expected
    ('CVE-1970-9000', 404, b'not found'),  # cve not found
    ('9999', 404, b'not found'),  # id not found
    ('Invalid ID', 404, b'not found'),  # invalid id
]
VULN_VIEW_DETAILS_VARIANTS = VULN_VIEW_VARIANTS[:]
VULN_VIEW_DETAILS_VARIANTS[-1] = ('Invalid ID', 302, b'target URL: <a href="/">')  # redirect on invalid ID
VULN_VIEW_ANNOT_VARIANTS = VULN_VIEW_VARIANTS[:]
VULN_VIEW_ANNOT_VARIANTS[0] = ('CVE-1970-1000', 200, b'[]')


@pytest.mark.integration
@pytest.mark.parametrize("input_id,expected_status,expected_content", VULN_VIEW_VARIANTS)
def test_view_vulnerability(client, input_id, expected_status, expected_content):
    resp = client.get('/' + input_id)
    assert resp.status_code == expected_status
    assert expected_content in resp.data


@pytest.mark.integration
@pytest.mark.parametrize("input_id,expected_status,expected_content", VULN_VIEW_DETAILS_VARIANTS)
def test_view_vulnerability_details(client, input_id, expected_status, expected_content):
    resp = client.get('/{}/details'.format(input_id))
    assert resp.status_code == expected_status
    assert expected_content in resp.data


@pytest.mark.integration
@pytest.mark.parametrize("input_id,expected_status,expected_content", VULN_VIEW_ANNOT_VARIANTS)
def test_get_vulnerability_annotation_data(client, input_id, expected_status, expected_content):
    resp = client.get('/{}/annotation_data'.format(input_id))
    assert resp.status_code == expected_status
    assert expected_content in resp.data


@pytest.mark.integration
def test_get_new_vuln_page(client):
    resp = client.get('/create')
    assert resp.status_code == 200
    assert b'Add a new vulnerability' in resp.data


@pytest.mark.integration
def test_get_update_vuln_page(client):
    resp = client.get('/CVE-1970-1000/create')
    assert resp.status_code == 200
    assert b'Add a new vulnerability' in resp.data


@pytest.mark.integration
def test_create_vuln_page_if_nonexisting(client):
    resp = client.get('/CVE-1970-9000/create')
    assert resp.status_code == 200
    assert b'Add a new vulnerability' in resp.data


@pytest.mark.integration
def test_create_vuln_page_if_invalid(client):
    resp = client.get('/INVALID_ID/create')
    assert resp.status_code == 200
    assert b'Add a new vulnerability' in resp.data


@pytest.mark.integration
def test_delete_vulnerability_entry(client):
    vuln = Vulnerability.get_by_cve_id('CVE-1970-1000')
    assert vuln is not None
    resp = client.post('/CVE-1970-1000/create', data={
        'delete_entry': vuln.id,
    })
    assert resp.status_code == 302

    vuln = Vulnerability.get_by_cve_id('CVE-1970-1000')
    assert vuln is None


@pytest.mark.integration
def test_create_new_vulnerabilty(client, db_session):
    # hacky way to determine next ID
    next_id = db_session.query(Vulnerability).count() + 1
    data = {
        'cve_id': 'CVE-1970-3000',
        'comment': 'This is a new bug!!11',
        'commits-0-commit_link': 'https://github.com/OWNER/REPO/commit/12345678',
        'commits-0-repo_name': 'REPO',
        'commits-0-repo_url': 'https://github.com/OWNER/REPO',
        'commits-0-commit_hash': '12345678',
    }
    resp = client.post('/create', data=data)
    assert resp.status_code == 302
    assert resp.headers.get('Location', '<empty>').endswith(f'/{next_id}')

    vuln = db_session.query(Vulnerability).get(next_id)
    assert vuln.comment == data['comment']
    assert vuln.cve_id == data['cve_id']
    assert len(vuln.commits) == 1
    assert vuln.commits[0].commit_link == data['commits-0-commit_link']
    assert vuln.commits[0].repo_name == data['commits-0-repo_name']
    assert vuln.commits[0].repo_url == data['commits-0-repo_url']
    assert vuln.commits[0].commit_hash == data['commits-0-commit_hash']


@pytest.mark.integration
def test_update_vulnerabilty(client, db_session):
    data = {
        'cve_id': 'CVE-1970-1000',
        'comment': 'This is the new comment',
        'commits-0-commit_link': 'https://github.com/OWNER/REPO/commit/12345678',
        'commits-0-repo_name': 'REPO',
        'commits-0-repo_url': 'https://github.com/OWNER/REPO',
        'commits-0-commit_hash': '12345678',
    }
    resp = client.post('/CVE-1970-1000/create', data=data)
    assert resp.status_code == 302
    assert resp.headers.get('Location', '<empty>').endswith(f'/1')

    vuln = Vulnerability.get_by_id(1)
    assert vuln.comment == data['comment']
    assert vuln.cve_id == data['cve_id']
    assert len(vuln.commits) == 1
    assert vuln.commits[0].commit_link == data['commits-0-commit_link']
    assert vuln.commits[0].repo_name == data['commits-0-repo_name']
    assert vuln.commits[0].repo_url == data['commits-0-repo_url']
    assert vuln.commits[0].commit_hash == data['commits-0-commit_hash']
